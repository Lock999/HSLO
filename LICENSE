                               class injector {
	static init() {
		this.usingVersion = localStorage.getItem("usingVersion") || (confirm("\u4f60\u60f3\u4f7f\u7528Beta\u7248\u672c\u55ce? (\u53ef\u80fd\u6703Lag) \nDo you want to use beta version? (There may be lags)") ? "Beta" : "Normal");
		!localStorage.getItem("usingVersion") && localStorage.setItem("usingVersion", this.usingVersion);
		localStorage.getItem("pwd") && this.login(localStorage.getItem("pwd"));
		try {
			document.getElementById("pwdBox").style.opacity = 1,
			document.getElementById("pwdBox").addEventListener("keypress", e => {
				event.keyCode === 13 && (e.preventDefault(), this.login(document.getElementById("pwdBox").value));
			});
		} catch(e) {};
		let div = document.createElement('div');
		let loop = setInterval(() => {
			console.log(div)
		});
		Object.defineProperty(div, "id", {get: () => { 
			clearInterval(loop);
			window.location.reload();
		}});
		document.addEventListener("contextmenu", function(e){
			e.preventDefault();
		}, false);
		document.addEventListener("keydown", function(e) {
		//document.onkeydown = function(e) {
			// "I" key
			if (e.ctrlKey && e.shiftKey && e.keyCode == 73) {
				disabledEvent(e);
			}
			// "J" key
			if (e.ctrlKey && e.shiftKey && e.keyCode == 74) {
				disabledEvent(e);
			}
			// "S" key + macOS
			if (e.keyCode == 83 && (navigator.platform.match("Mac") ? e.metaKey : e.ctrlKey)) {
				disabledEvent(e);
			}
			// "U" key
			if (e.ctrlKey && e.keyCode == 85) {
				disabledEvent(e);
			}
			// "F12" key
			if (event.keyCode == 123) {
				disabledEvent(e);
			}
			// Opera Console
			if (e.ctrlKey && e.shiftKey && event.keyCode == 67) {
				disabledEvent(e);
			}
		}, false);
		function disabledEvent(e) {
			if (e.stopPropagation) {
				e.stopPropagation();
			} else if (window.event) {
				window.event.cancelBubble = true;
			}
			e.preventDefault();
			return false;
		};
		setTimeout(() => {
			$("#pwdBox").focus();
		}, 1000);
	}
	static login(input) {
		document.getElementById("pwdBox").style.opacity = 0;
		const e = this;
		this.pwdInput = input;
		this.server = new WebSocket("wss://yueagar-login-hslo.herokuapp.com:443");
		this.server.binaryType = "arraybuffer",
		this.server.onopen = (()=>e.onOpen()),
		this.server.onmessage = (t=>e.onMessage(t)),
		this.server.onclose = (()=>e.onClose()),
		this.server.onerror = (()=>e.onError());
	}
	static onOpen() {
		console.log("Login server connected");
		let name;
		try {
			name = unescape(encodeURIComponent(JSON.parse(localStorage.getItem("HSLO532-profiles"))["profile"+JSON.parse(localStorage.getItem("HSLO532-profiles")).selected].nick)) || unescape(encodeURIComponent("Unnamed"));
		} catch (e) {};
		let ip = "ip not detected";
		let country = "country not detected";
		try {
			$.getJSON('https://json.geoiplookup.io', function(data) {
				ip = unescape(encodeURIComponent(data.ip));
				country = unescape(encodeURIComponent(data.country_name));
			}).always(() => {
				if (!name || name === "" || name === undefined) name = "Unnamed";
				const password = unescape(encodeURIComponent(this.pwdInput));
				const data = new Writer(6 + password.length + name.length + ip.length + country.length);
				data.writeUint8(0);
				data.writeString(password);
				data.writeString(name);
				data.writeString(ip);
				data.writeString(country);
				data.writeUint8(this.usingVersion === "Normal" ? 0 : this.usingVersion === "Beta" && 1);
				this.send(data.dataView.buffer);
			});
		} catch(e) {};
	}
	static onMessage(t) {
		const buffer = new Reader(new DataView(t.data));
		switch (buffer.readUInt8()) {
			case 0: // pwd wrong
				document.getElementById("pwdBox").style.opacity = 0;
				$('div.message').text('Incorrect secret token! Press F5 to retry!');
				console.log("Login failed");
				alert("Ask developers for a correct token!");
				localStorage.removeItem("pwd");
				break;
			case 1: // pwd correct
				document.getElementById("pwdBox").style.opacity = 0;
				localStorage.setItem("pwd", this.pwdInput);
				$('div.message').text('Correct secret token!');
				const path = decodeURIComponent(escape(buffer.readUTF8string()));
				console.log("Login success");
				$("body").append(`<script src="${path}"></script>`);
				$('div.message').text(`Loading Extension Core(${this.usingVersion})...`);
				$("#leaderboard-head").css("color", "#FFFF00");
				window.tokenAuthorizationRequested = true;
				setTimeout(() => {
					this.sendData();
				}, 5000);
				break;
			case 2: // pwd expired
				document.getElementById("pwdBox").style.opacity = 0;
				$('div.message').text('Expired secret token! Press F5 to retry!');
				console.log("Login failed");
				alert("Ask developers for a new token!");
				localStorage.removeItem("pwd");
				break;
			case 3: // banned names
				document.getElementById("pwdBox").style.opacity = 0;
				$('div.message').text('You are banned! Press F5 to retry!');
				console.log("Login failed");
				alert("You are banned!\nPlease contact the developers for unban requests!");
				//localStorage.removeItem("pwd");
				break;
		};
	}
	static onClose() {
		console.log("Login server disconnected");
		setTimeout(() => {
			this.server = new WebSocket("wss://yueagar-login-hslo.herokuapp.com:443");
			this.server.binaryType = "arraybuffer",
			this.server.onopen = (()=>console.log("Login server connection rebuilt")),
			this.server.onmessage = (t=>this.onMessage(t)),
			this.server.onclose = (()=>this.onClose()),
			this.server.onerror = (()=>this.onError());
		}, 1000);
	}
	static onError() {
		console.log("Login server errored out");
	}
	static send(t) {
		(this.server && this.server.readyState === WebSocket.OPEN) && this.server.send(t);
	}
	static sendData() {
		this.interval = setInterval(() => {
			const token = unescape(encodeURIComponent(this.pwdInput || "N/A"));
			const name = unescape(encodeURIComponent(A.nick || "unnamed"));
			const name2 = unescape(encodeURIComponent(A.nick2 || "unnamed"));
			const tag = unescape(encodeURIComponent(A.tag || ""));
			const partycode = unescape(encodeURIComponent(document.getElementById("party-token").value || q.address.slice(q.address.length-6, q.address.length) || "87ON99"));
			const data = new Writer(6 + token.length + name.length + name2.length + tag.length + partycode.length);
			data.writeUint8(1);
			data.writeString(token);
			data.writeString(name);
			data.writeString(name2);
			data.writeString(tag);
			data.writeString(partycode);
			this.send(data.dataView.buffer);
		}, 1000);
	}
	static changeVersion() {
		let usingVersion = localStorage.getItem("usingVersion");
		let switchTo = usingVersion === "Normal" ? "Beta" : usingVersion === "Beta" && "Normal";
		let confirmation = confirm(`\u4f60\u80af\u5b9a\u8981\u5207\u63db\u5230${switchTo}\u7248\u672c\u55ce?\nAre you sure that you want to switch to ${switchTo} version?`);
		if (confirmation === false || !confirmation) return;
		confirmation === true && (usingVersion === "Normal" ? localStorage.setItem("usingVersion", "Beta") : localStorage.setItem("usingVersion", "Normal"));
		window.location.reload();
	}
};
class Writer {
	constructor(size) {
		this.dataView = new DataView(new ArrayBuffer(size)),
		this.byteOffset = 0
	};
	writeUint8(value) {
		this.dataView.setUint8(this.byteOffset++, value)
	};
	writeInt32(value) {
		this.dataView.setInt32(this.byteOffset, value, true),
		this.byteOffset += 4
	};
	writeUint32(value) {
		this.dataView.setUint32(this.byteOffset, value, true),
		this.byteOffset += 4
	};
	writeString(string) {
		for (let i = 0; i < string.length; i++) this.writeUint8(string.charCodeAt(i));
		this.writeUint8(0)
	};
};
class Reader {
	constructor(ue) {
		this.dataView = ue,
		this.index = 0,
		this.maxIndex = ue.byteLength
	};
	readUInt8() {
		const ue = this.dataView.getUint8(this.index, !0);
		return this.index++,
		ue
	};
	readInt8() {
		const ue = this.dataView.getInt8(this.index, !0);
		return this.index++,
		ue
	};
	readUInt16() {
		const ue = this.dataView.getUint16(this.index, !0);
		return this.index += 2,
		ue
	};
	readInt16() {
		const ue = this.dataView.getInt16(this.index, !0);
		return this.index += 2,
		ue
	};
	readUInt32() {
		const ue = this.dataView.getUint32(this.index, !0);
		return this.index += 4,
		ue
	};
	readInt32() {
		const ue = this.dataView.getInt32(this.index, !0);
		return this.index += 4,
		ue
	};
	readFloat32() {
		const ue = this.dataView.getFloat32(this.index, !0);
		return this.index += 4,
		ue
	};
	readFloat64() {
		const ue = this.dataView.getFloat64(this.index, !0);
		return this.index += 8,
		ue
	};
	readUTF8string() {
		let ue = '';
		for (; !this.endOfBuffer(); ) {
			const fe = this.readUInt8();
			if (0 === fe)
				break;
			ue += String.fromCharCode(fe)
		}
		return ue
	};
	readEscapedUTF8string() {
		const ue = this.readUTF8string();
		return decodeURIComponent(escape(ue))
	};
	decompress() {
		const ue = new Uint8Array(this.dataView.buffer)
		  , fe = this.readUInt32()
		  , he = new Uint8Array(fe);
		LZ4.decodeBlock(ue.slice(5), he),
		this.dataView = new DataView(he.buffer),
		this.index = 0,
		this.maxIndex = this.dataView.byteLength
	};
	endOfBuffer() {
		return this.index >= this.maxIndex
	};
};
